class Solution {
public:
    bool isTrue = true;
    vector<pair<int, int> > dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    bool valid(vector<vector<int>>& grid2, int r, int c){
        return r >= 0 && c >= 0 && r < grid2.size() && c < grid2[0].size() && grid2[r][c] == 1;
    }

    void dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j, vector< vector<bool> > &vis){
        vis[i][j] = true;
        if(grid1[i][j] == 0){
            isTrue = false;
        }
        for(auto it: dir){
            int a = it.first + i, b = it.second + j;
            if(valid(grid2, a, b) && !vis[a][b]){
                dfs(grid1, grid2, a, b, vis);
            }
        }
    }

    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int m = grid2.size(), n = grid2[0].size();

        int ans = 0; 
        vector< vector<bool> > vis(m, vector<bool> (n, false));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid2[i][j] == 1 && !vis[i][j]){
                    isTrue = true;
                    dfs(grid1, grid2, i, j, vis);
                    ans += (isTrue ? 1 : 0);
                }
            }
        }
        return ans;
    }
};